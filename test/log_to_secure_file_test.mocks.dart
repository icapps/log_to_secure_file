// Mocks generated by Mockito 5.4.3 from annotations
// in log_to_secure_file/test/log_to_secure_file_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_key_value_file_storage/flutter_key_value_file_storage.dart'
    as _i2;
import 'package:flutter_secure_file_storage/src/flutter_secure_file_storage.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFileStorageManager_0 extends _i1.SmartFake
    implements _i2.FileStorageManager {
  _FakeFileStorageManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FlutterSecureFileStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureFileStorage extends _i1.Mock
    implements _i3.FlutterSecureFileStorage {
  MockFlutterSecureFileStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FileStorageManager get fileStorageManager => (super.noSuchMethod(
        Invocation.getter(#fileStorageManager),
        returnValue: _FakeFileStorageManager_0(
          this,
          Invocation.getter(#fileStorageManager),
        ),
      ) as _i2.FileStorageManager);

  @override
  set fileStorageManager(_i2.FileStorageManager? _fileStorageManager) =>
      super.noSuchMethod(
        Invocation.setter(
          #fileStorageManager,
          _fileStorageManager,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> write<T>({
    required String? key,
    required T? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<T?> read<T>({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {#key: key},
        ),
        returnValue: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);

  @override
  _i4.Future<bool> containsKey({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {#key: key},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> delete({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#key: key},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Set<String>> getAllKeys() => (super.noSuchMethod(
        Invocation.method(
          #getAllKeys,
          [],
        ),
        returnValue: _i4.Future<Set<String>>.value(<String>{}),
      ) as _i4.Future<Set<String>>);

  @override
  _i4.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
